"filetype vim

" -----------------
"  LocalHelp (F1)
" -----------------
function! LocalHelp()
  if &ft =~ "perl"
    let s:browser = "perldoc"
  else
    let s:browser = "man"
  endif
  let s:wordUnderCursor = expand("<cword>")
  let s:cmd = "silent !" . s:browser . " " . s:wordUnderCursor
  execute s:cmd
  redraw!
endfunction

" --------------------------
"  Rolling up function (F2)
" --------------------------
function! RollUp()
    exe "normal mr"
    exe "normal :set nows\<ENTER>"
    exe "normal gg"
    while (1)
        try
            exe "normal /sub \<ENTER>"
        catch /E385:/
			exe "normal :echohl Question | echo 'All done :)' | echohl None"
			exe "normal `r"
            return
        endtry
		if getline('.') !~ ';\s*$'
			exe "normal v%zf"
		endif
	endwhile
    exe "normal mr"
    exe "normal :set nows\<ENTER>"
    exe "normal gg"
    while (1)
        try
            exe "normal /method \<ENTER>"
        catch /E385:/
			exe "normal :echohl Question | echo 'All done :)' | echohl None"
			exe "normal `r"
            return
        endtry
		if getline('.') !~ ';\s*$'
			exe "normal v%zf"
		endif
	endwhile
endfunction

" --------------------------------------
"  Adding new jira reference link(Leader J)
" --------------------------------------
function! JiraRefLink()
    let task = input("insert jira task id: ")
    exe "normal k$"
    call append(".","# --- https://jira.hurra.com/browse/".task)

    return ""
endfunction


" --------------------------------------
"  Adding new Perl object variable (F3F3)
" --------------------------------------
function! ObjectVariable()
    let command = input("type a variable name: ")
    call append(".",("\tmy ".'$o_'.command.' = $self->'.command.';'))
    exe "normal j$"

    return ""
endfunction

" --------------------------------------
"  Adding new Perl function param (F3)
" --------------------------------------
function! NewFunctionParam()
    let command = input("type a param name: ")
    let is_req = input("is required (y/n)[Y]: ")
	if (is_req == 'n' || is_req == 'N')
		let rq = 0
		echo rq
	else
		let rq = 1
	endif
    let l = system("~/.vim/bin/makeparam.pl ".command." ".rq)
    call append(".",split(l,"\n"))
    exe "normal j$"

    return ""
endfunction

" -------------------------------
"  Adding new Perl function (F4)
" -------------------------------
function! NewFunction()
    let command = input("type a function name: ")
    let l = system("~/.vim/bin/makefunct.pl ".command)
    call append(".",split(l,"\n"))
    exe "normal 8j"
    return "\t"
endfunction


" -----------------------------------
"  dumping Record under cursor (F12)
" -----------------------------------
function! RecordDumper()
	let head = getline(1)
	let line = getline('.')

	let head = strtrans(head)
	let line = strtrans(line)
	let head = substitute(head,"\'", "APOSMAKLOTA","g")
	let line = substitute(line,"\'", "APOSMAKLOTA","g")
	let head = substitute(head,"#", "APOSMAHASZ","g")
	let line = substitute(line,"#", "APOSMAHASZ","g")
	let head = substitute(head,"!", "APOSMAKRZYK","g")
	let line = substitute(line,"!", "APOSMAKRZYK","g")
	execute "!~/.vim/bin/rder.pl \'".head."\' \'".line."\'"
	return ""
endfunction


" -------------------------------
"  Tab autocomplete - (Tab)
" -------------------------------
function! CleverTab()
   if strpart( getline('.'), col('.')-2, 1) =~ '^[A-Za-z0-9]*$' && col('.') != 1
      return "\<C-N>"
   else
      return "\<Tab>"
endfunction

" --------------------------
"  make phone call from vim
" --------------------------
function! Call()
    let numer=input("type phonenr: ")
    let exi = system("/usr/bin/wget -O - --quiet 'http://pl.hurra.com/call.pl?no=".numer."'")
endfunction


" ########################################################### NEW ONES ------------------->

" ----------------------
"  PVcalc
" ----------------------
function! PVcalc()
	let filename = expand("%:p")
	let lin = getline('.')
	if (lin =~ '^#\s*p')
			let start = line('.') + 1
			let end = search("^#\s*ep") - 1
			let lines = getline(start, end)
			let lin = join(lines, " ")
	endif
	let result = system("~/.vim/bin/pcalc.pl '".filename."' '".lin."'")
	call append(".",result)
	return
endfunction

" ----------------------
"  Pmysql
" ----------------------
function! Pmysql()
	let loginfirst = "'".getline('1')."' "
	let loginsecond = "'".getline('2')."' "
	let loginprev = "'".getline(line('.')-1)."' "
	let current = getline('.')
	let current = "'".substitute(current,"\'", "APOSMAKLOTA","g")."'"
	let l = system("~/.vim/bin/pmysql.pl ".loginfirst.loginsecond.loginprev.current)
	let e = substitute(l,'\%x00', '\r',"g")
	call append(".",e)
	return
endfunction

" -------------------
"  CurrentFunction
" -------------------
function! CurrentFunction()
	let match = search('^\s*sub ','bn', "1")
    let source = 1
	if (match == 0)
	    let match = search('^newgroup','bn', "1")
        let source = 0
	    if (match == 0)
        	return ""
        endif
	endif
	let value = getline(match)
    if (source == 1)
        let value = substitute(value,"\s*{\s*", "","g")
    	let value = substitute(value,"\\s*", "","g")
    	let value = substitute(value,"sub", " current: ","g")
        let value = value." "
    else
        let value = substitute(value,"[\"']);", "","g")
    	let value = substitute(value,"newgroup([\"']", " current: ","g")
    endif
	return value
endfunction

" -------------------
"	InsertDumper
" -------------------
function! InsertDumper()
    let variable = input("type variable: ")
	let content = "\nuse Data::Dumper; # FIXME debuging ".variable."\nprint Dumper(".variable.");\n\n"
	put =content
endfunction

" -------------------
"	InsertDumper
" -------------------
function! Dup()
    let content = "warn 'DUP-".g:dup."'".'."\n";'."\t# DEBUG-VIM\n"
    let g:dup = g:dup + 1
	put =content
endfunction


" -------------------
"  OpenBrother
" -------------------
function! OpenBrother()
	let s:path = expand("%:p")
	let s:ext = expand("%:e")
	let s:filen = expand("%:t")
	let s:topdir = $APOS_TOPDIR

	if (s:ext == 't')
		let s:path = substitute(s:path,s:topdir."/t", s:topdir,"")
		let s:path = substitute(s:path,".t$","","")
	else
		let s:path = substitute(s:path,s:topdir, s:topdir."/t/","")
		let s:path = s:path.".t"
	endif
	let s:cmd = "vsplit ".s:path
	execute s:cmd
	redraw!
endfunction

" ================================================ Online Help

" -------------
"  GoogleDoc
" -------------
function! GoogleDoc()
  let s:browser = "konqueror"
  let s:wordUnderCursor = expand("<cword>")
  let s:url = "http://www.google.pl/search?hl=pl&q=" . s:wordUnderCursor . "&site=&btnG=Szukaj+w+Google&lr=&aq=f&oq="
  let s:cmd = "silent !" . s:browser . " " . s:url
  execute s:cmd
  redraw!
endfunction

" -------------
"  WikiDoc
" -------------
function! WikiDoc()
  let s:browser = "konqueror"
  let s:wordUnderCursor = expand("<cword>")
  let s:url = "http://pl.wikipedia.org/wiki/".s:wordUnderCursor
  let s:cmd = "silent !" . s:browser . " " . s:url
  execute s:cmd
  redraw!
endfunction

" -------------
"  OnlineDoc
" -------------
function! OnlineDoc()
  if &ft =~ "cpp"
    let s:urlTemplate = "http://doc.trolltech.com/4.1/%.html"
  elseif &ft =~ "ruby"
    let s:urlTemplate = "http://www.ruby-doc.org/core/classes/%.html"
  elseif &ft =~ "perl"
    let s:urlTemplate = "http://perldoc.perl.org/functions/%.html"
  else
    return
  endif
  let s:browser = "links"
  let s:wordUnderCursor = expand("<cword>")
  let s:url = substitute(s:urlTemplate, "%", s:wordUnderCursor, "g")
  let s:cmd = "silent !" . s:browser . " " . s:url
  execute s:cmd
  redraw!
endfunction

" Online doc search.

" mapping
"inoremap    <buffer>  "  <ESC>call AutoBracket()<CR>i
"inoremap    <buffer>  '  <ESC>call AutoBracket()<CR>i
"inoremap    <buffer>  `  <ESC>call AutoBracket()<CR>i
"inoremap    <buffer>  (  <ESC>call AutoBracket()<CR>i
"inoremap    <buffer>  [  <ESC>call AutoBracket()<CR>i

" -------------
"  GoogleDoc
" -------------
function! AutoBracket()
"  let s:signUnderCursor = expand("<cword>")
"  let s:wordUnderCursor = expand("<cword>")

"	let loginprev = "'".getline(line('.')-1)."' "
	"let current = getline('.')
 "   let e = '('.s:wordUnderCursor.')'
"	call append(".",e)
	return

 " redraw!
endfunction

" -------------
"  SwitchHls
" -------------
function! SwitchHls()
    if &hls
        set nohls
    else
        set hls
    endif
endfunction

" -------------
"  SwitchHls
" -------------
function! TidyIt()
    :%!perltidy -ce --continuation-indentation=4 -cti=0 -cpi=0 -l=350 --line-up-parentheses -pt=0 -sbt=1 -bt=0 -bbt=0 -nsbl -vt=0 -vtc=0 -sot -isbc -nolq -msc=4 -hsc -csc -csci=1 -cscp="+ end of:" -cscb -fsb='\#\<notidy' -fse='\#notidy\>' -bbs 
    if (search('__ @_'))
        :%s/__ @_/__@_/g
    endif
endfunction

" vim: syntax=vim
